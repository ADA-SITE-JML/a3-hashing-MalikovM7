using System;
using System.IO;
using System.Text;
using System.Security.Cryptography;

class Program
{
    static int n; // number of buckets
    static int s; // max character count per file 

    static void Main()
    {
        foreach (var file in Directory.GetFiles(Directory.GetCurrentDirectory(), "*.txt"))
        {
            File.Delete(file);
        } //I added this loop to delete all existing .txt files in the memory before each run
        
        if (args.Length != 2 || !int.TryParse(args[0], out n) || !int.TryParse(args[1], out s))
        {
            Console.WriteLine("Usage: hash_app <number_of_buckets> <max_characters_per_file>");
            return;
        } //You asked to run the program with console arguments that is why I changed the part when I first was asking from user n and s values and added them directly 
        //from run configurations.

        Console.WriteLine($"hash_app started with {n} buckets, max {s} characters per file.");
        //Just for visualisation

        Console.CancelKeyPress += (sender, e) =>
        {
            Console.WriteLine("\nExiting...");
            e.Cancel = true;
            Environment.Exit(0);
        }; //This part for exiting, pressing on Ctrl+c on windows or control+c on mac

        


        
    }

    //Main Hashing function (separate method from main)

    static int HashFunction(string input)
    {
        using (SHA256 sha256 = SHA256.Create())
        {
            byte[] hash = sha256.ComputeHash(Encoding.UTF8.GetBytes(input));
            //in this line it converts the input string to bytes, and using sha256.ComputeHash it hashes the byte array.
            int result = BitConverter.ToInt32(hash, 0);
            //in this line it takes first 4 bytes and converts them to integers, it is needed because we need the number not the full hashcode.
            return Math.Abs(result);
            //this line makes us sure that the result is non negative and fits into the range of buckets from 1 to n.
        }
    }


    }
